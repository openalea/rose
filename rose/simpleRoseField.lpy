
timestep=1.
nsteps=70
step=0
phyl=30.# 30 degrés jour pour un phyllochrone; par la suite, il sera calculé sur un tableau d'entrée directement dans la fonction tphyl.calc
nphy=12
ddC=0.
Ddd=10.# pour delta dd (dans un pas de temps du modèle)

ddDeb=10.


LmaxfolA=3.
LmaxEN=3.
LmaxPed=7.
LmaxRachis=3.
DmaxFlo=1.5

vmaxfolA=0.5
vmaxEN=0.5
vmaxPed=0.5
vmaxRachis=0.5
vmaxFlo=0.5

nfol=5 ## pour l'instant ne sert pas



# pour l'instant, tphyl est une fonction linéaire de dd (ensuite, il faudra mettre un tableau) depuis le débourrement (= date d'émergence de la 1ère feuille)

def tphyl_calc(dd):
  if dd>=0.:
    return 1/phyl*dd+1.
  else:
    return 0.

# pour simplifier les choses, l'extension des organes suit une linéaire suivie d'un plateau; l'entre-noeud et la feuille grandissent en même temps
# ultérieurement, rajouter des fonctions spécifiques pour l'entre-noeud et la feuille
def extend(lengthMax,vmax,age):
  if age<(1/vmax):
    L=(vmax*age)*lengthMax
  else:
    L=lengthMax
  return L


module canopy(nplants)
module plant(x,y,z)
module A(n,N,dd0)
module leaf(LfolA,Lrachis,dd0,n)
module EN(L,dd0,n)
module Ped(L,dd0,n)
module Flower(D,dd0,n)

Axiom: canopy(24)

def StartEach():
  global step
  global ddC
  step=step+timestep
  ddC=ddC+Ddd

def EndEach():
  print("   ")

derivation length: nsteps
production:

canopy(nplants):
  i=1
  j=1
  for p in range(nplants):
    x=15*i
    y=15*j
    z=0
    if (p+1)%6==0:
      j=j+1
      i=1
    else:
      i=i+1
    nproduce plant(x,y,z)A(0,nphy,ddDeb)


# pour l'instant, la fleur apparaît quand la croissance du pédoncule commence: voir si on le fait plutôt coincider avec BFV (plus difficile pour le faire coincider avec l'évolution de la structure qui a eu lieu avant!)
# la croissance de tus les organes est exprimée en temps phyllochronique
A(n,N,dd0):
  n2do=N-n
  tphyl=tphyl_calc(ddC-dd0)
  #l'âge de l'apex est en temps phyllochronique
  if n2do>0:# le rendre plus générique
    if tphyl>=(n+1):
      n=n+1
      produce EN(0.1,dd0,n)[leaf(0.1,0.1,dd0,n)]A(n,N,dd0)
    else:
      produce A(n,N,dd0)
  else:
    produce Ped(0.1,dd0,n)Flower(0.1,dd0,n)


leaf(LfolA,Lrachis,dd0,n):
  age=tphyl_calc(ddC-dd0)-n
  produce leaf(extend(LmaxfolA,vmaxfolA,age),extend(LmaxRachis,vmaxRachis,age),dd0,n)

# l'entre-noeud prend l'âge de la feuille
EN(L,dd0,n):
  age=tphyl_calc(ddC-dd0)-n
  produce EN(extend(LmaxEN,vmaxEN,age),dd0,n)

Ped(L,dd0,n):
  age=tphyl_calc(ddC-dd0)-n
  produce Ped(extend(LmaxEN,vmaxEN,age),dd0,n)

Flower(D,dd0,n):
  age=tphyl_calc(ddC-dd0)-n
  produce Flower(extend(DmaxFlo,vmaxFlo,age),dd0,n)

interpretation:
plant(x,y,z)-->@M(x,y,z) # attention: il tourne les plantes les unes par rapport aux autres
#leaf(length,age)-->;(2)+(90)_(1)F(LmaxLeaf)
# pour l'instant, toutes les folioles d'une feuille ont la même longueur que la foliole A et la forme des folioles est celle prédéfinie dans Lpy
# je n'ai rien fait d'automatique pour la visualisation en fonction du nombre de folioles
leaf(LfolA,Lrachis,dd0,n)-->;(2)+(90)/(90)_(0.1)F(2*Lrachis/(nfol+1))+(90)~l(LfolA)-(180)~l(LfolA)+(90)_(0.1)F(2*Lrachis/(nfol+1))+(90)~l(LfolA)-(180)~l(LfolA)+(90)_(0.1)F(2*Lrachis/(nfol+1))~l(LfolA)
EN(L,dd0,n)-->/(180)_(0.2)F(L)
Ped(L,dd0,n)-->/(180)_(0.2)F(L)
Flower(D,dd0,n)-->@O(D)
A(n,N,dd0)-->*

endlsystem