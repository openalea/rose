


def plotCurve(curvedata, pointdata = None, xextend = None, yextend = None, pos = (0.1,-0.3), dim = (0.8,0.8), xtick = None, ytick = None, withorigin = True ):
  if LPY_VERSION_MAJOR < 2 or (LPY_VERSION_MAJOR == 2 and LPY_VERSION_MINOR < 4):
    import warnings
    warnings.warn("Your version of lpy do not allow 2D plot")
    return
  from math import ceil, floor, log
  from openalea.plantgl.all import Polyline2D
  if type(curvedata) == tuple:
    curvedata = zip(curvedata[0],curvedata[1])
  if type(pointdata) == tuple:
    pointdata = zip(pointdata[0],pointdata[1])
  data = list(curvedata)
  if not pointdata is None:
    data += pointdata
  if len(data) > 1:
    if xextend:
      minx, maxx = xextend
    else :
      minx = floor(min([x for x,y in data]))
      maxx = ceil(max([x for x,y in data]))
    if yextend:
      miny, maxy = yextend
    else :
      miny = floor(min([y for x,y in data]))
      maxy = ceil(max([y for x,y in data]))
    if withorigin:
      maxx = max(0,maxx)
      minx = min(0,minx)
      maxy = max(0,maxy)
      miny = min(0,miny)
    xext = maxx - minx
    yext = maxy - miny
    x2Dlength, y2Dlength = dim
    projx = lambda x: (x2Dlength*(x-minx)/xext)
    projy = lambda y: (y2Dlength*(y-miny)/yext)
    if xtick is None:
      nbdigit = round(log(xext,10))
      xtick = 10**(nbdigit-1)
    if ytick is None:
      nbdigit = round(log(yext,10))
      ytick = 10**(nbdigit-1)
    curvedata = [(projx(x),projy(y)) for x,y in curvedata]
    ticklength = 0.02
    
    nproduce [ @2D SetColor(255,0,0) @M(pos[0],pos[1]) @R 
    if not curvedata is None:
      nproduce @g(Polyline2D(curvedata,width=2))
    if not pointdata is None:
      nproduce SetColor(255,0,255)
      for x,y in pointdata:
        nproduce [ @M(pos[0]+projx(x),pos[1]+projy(y)) @O(0.03)]
    if miny <= 0 <= maxy:
      nproduce SetColor(0,255,0) @g(Polyline2D([(projx(minx),projy(0)),(projx(maxx),projy(0))]))
      cxtick = ((minx // xtick) * xtick)
      if cxtick < minx : cxtick += xtick
      while cxtick <= maxx:
        if cxtick != 0:
          nproduce @g(Polyline2D([(projx(cxtick),projy(0)-ticklength),(projx(cxtick),projy(0)+ticklength)]))
        cxtick += xtick
    if minx <= 0 <= maxx:
      nproduce SetColor(0,0,255) @g(Polyline2D([(projx(0),projy(miny)),(projx(0),projy(maxy))]))
      cytick = ((miny // ytick)*ytick)
      if cytick < miny : cytick += ytick
      while cytick <= maxy:
        if cytick != 0:
          nproduce @g(Polyline2D([(projx(0)-ticklength,projy(cytick)),(projx(0)+ticklength,projy(cytick))]))
        cytick += ytick
    nproduce ]

def draw_internode(p, max_pin_value, max_auxin_value, lwidth, propstodraw= ['auxin','sl','ck'],propcolors = [15,10,17,18]):
   from transport_eq import  ApexParameter
   pinupr = 0.5 * p.pin_up /max_pin_value
   pindownr = 0.5 * p.pin_down /max_pin_value
   pinlatr = 0.5 * p.pin_lat /max_pin_value
   rfd = abs(p.flux_down)*0.02 +0.01
   rfu = abs(p.flux_up)*0.02 +0.01
   rfl = abs(p.flux_lat)*0.02 +0.01
   isapex = isinstance(p,ApexParameter)
   ismedium = p.hasattr('medium')
   tl = 3
   nproduce  [
   if not p.first:
     tl = 2.5
     nproduce ,(20 if p.flux_down < 0 else 21) _(rfd) F(0.5) 
     #nproduce [,(20 if p.flux_down < activation_flux_th(p.sugar) else 0)f(-0.8)-(90)f(1)^(90)f(1)Label('%.2f'%-p.flux_down)]
   nproduce [,(1) f(pindownr/2) 
   K(2,pindownr)
   nproduce ] 
   nproduce [,(1)-(90)f(1+pinlatr/2)+(90)f(1+(pinupr+pindownr)/2)
   K(pinlatr,2+pinupr+pindownr)
   nproduce] # lateral pin box   
   nproduce [-(90)f(pinlatr/2)+(90),(21 if isapex else 20)
   B(2+pinlatr,2+pinupr+pindownr,lwidth)
   nproduce ] 
   nproduce f(2+pinupr+pindownr) # black box
   nproduce [ ,(1) | f(pinupr/2) 
   K(2,pinupr) 
   nproduce ]  # up pin box
   if not ismedium or p.first:
     nproduce   ,(20 if p.flux_up < 0 else 21) _(rfu) F(0.5) 
   nproduce ] f(pindownr + (1.5 if not p.first else 1))
   if abs(p.flux_lat) > 1e-3 :
     nproduce [-(90) f(1+pinlatr),(20 if p.flux_lat < 0 else 21) _(rfl) F(0.5)
     if p.flux_lat > 0:
       nproduce  [,(10)|f(0.2)|_(rfl+0.2)F(0.4,rfl)]
     elif p.flux_lat < 0:
       nproduce  [,(10)|f(0.2)|_(rfl)F(0.4,rfl+0.2)]
     nproduce ]
     
   if ismedium :  bgcol = 16
   elif isapex:   bgcol = 22
   else:          bgcol = 6
    
   nproduce  [,(bgcol)
   G(2)
   nproduce]
   nproduce  [^(90)f(0.01)&(90)
   nbprops = len(propstodraw)
   propw = 2./nbprops
   proppos = 1-(propw/2.)
   for prop,c in zip(propstodraw,propcolors):
     nproduce [,(c)+(90)f(proppos)-(90)
     K(propw,2.*getattr(p,prop)/max_auxin_value)
     nproduce ]
     proppos -= propw
   
   nproduce ]
   
   nproduce  f(1.5+pinupr)
   
   if not ismedium or p.first:
     # draw top arrow
     if p.flux_up > 0:
       nproduce  [,(10)|f(0.2)|_(rfu+0.2)F(0.4,rfu)]
     elif p.flux_up < 0:
       nproduce  [,(10)|f(0.2)|_(rfu)F(0.4,rfu+0.2)]
     
   #   nproduce [,(20)-(90)f(0.5)Label('%.2f'%p.flux_up)]

def B(x,h, lwidth) :
  nproduce  _(lwidth) f(-lwidth/2) +(90) F((x+lwidth)/2.)@O -(90) F(h+lwidth) @O -(90)F(x+lwidth) @O -(90)F(h+lwidth) @O -(90)F((x+lwidth)/2.)-(90)f(h+lwidth/2)

def G(l) : K(l,l)
def K(l,h) :
  nproduce f(h/2.){+(90)f(l/2.).+(90)f(h).+(90)f(l).+(90)f(h).}
