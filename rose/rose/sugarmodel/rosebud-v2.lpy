from copy import deepcopy
from numpy import arange
import transport_eq
reload(transport_eq)
from transport_eq import *
import utils
reload(utils)
from utils import *

"""
Modeling of the Sugar/Auxin ratio effect on the CK/SL ratio effect hat itself induce the brc1 level.
By default, A ratio of S/A of 1 gives stable ratio of CK/SL.
If we increment Sugar to 15, then CK is increased, SL decrease and BRC1 also.
If we decrease Auxin (to 5), the opposite situation occurs.
"""


mylpyimport(globals(), 'plotcurve','plotCurve','draw_internode')


# to have rapid burst:
initial_bud_auxin_level = 10 # instead of 10

# to have slower burst
ck_synth_coef = 0.8 # instead of 0.5


initial_internode_auxin_level = 10 # cj
initial_bud_auxin_level = 10    # ci
initial_top_medium_auxin_level= 10
initial_root_medium_auxin_level= 3

apical_bud_auxin_synth_coef = 10

root_auxin_decay_coef = 1
later_root_auxin_decay_coef = 1

pin_init = 0.5
ck_init  = 10
sl_init  = 10


init_brc1 = 10
brc1_synth_coef = 0.4
brc1_base_synth_coef = 0.1
brc1_decay_coef = 0.05



class SimuParameters:
  innate_polarity = True
  ACTIVATION = False
  with_auxin_max_level = True
    
  default_active_transport_coef = 0.5 # T
  diffusion_coef = 0.2 # D
  
  # axin synthesis and degradation coefficient
  default_auxin_synth_coef = 0.5 # \rho (c_i)
  default_auxin_decay_coef = 0.1 # v (a)
  
  default_pin_synth_coeff = 0.0 # rho_0
  pin_decay_coeff = 10  # \mu
    
  # parameter of the flux feedback function
  h_coef = 7.5 # rho_i->j in the paper
  # non linear exponent of the flux feedback function
  n = 3
  # hill saturation coef
  K = 1.3
  
  dt = 0.05
  
  default_sugar = 10.
  default_ck = 10.
  default_ck_synth_coef = 0.4 # depend on ratio sugar/auxin
  default_ck_base_synth_coef = 0.5
  default_ck_decay_coef =0.1
  ck_diffusion_coef = 0.5
  
  default_sl = 10
  default_sl_synth_coef = 0.1
  default_sl_base_synth_coef = 0.3
  default_sl_decay_coef = 0.1
  sl_diffusion_coef = 0.5
  
  default_slp = 10
  default_slp_synth_coef = 0.5
  default_slp_decay_coef = 0.05
  
  default_pin_slp_interaction = 0
  default_auxin_synth_coef = 1
  
  brc1_auxin_interaction = 0.01
  
  DEGRADATION = DEGRADATION
  DIFFUSION   = DIFFUSION

lateral_bud_auxin_synth_coef = 0.3

set_simu_parameters(SimuParameters())

# Graphical parameters 
max_pin_value = 1
max_auxin_value = 20
lwidth = 0.02


def txt(val):
    return str(round(val,2))[:5]


flux_threshold = 10
def activation_flux_th(p):
  return p.flux_down > flux_threshold

initial_view= 0

def StartEach(lstring):
    #if getIterationNb() == 200:
    #  entity = lstring[1]
    #  assert entity.name == 'Medium'
    #  entity.p.auxin_decay_coef = later_root_auxin_decay_coef
    pass

propstodraw= ['sugar','auxin','ck','sl','slp','brc1']
propcolors = [10,21,17,18,15,23]

def EndInterpretation():
   px,py = 0.5, -0.2
   nproduce  @2D 
   for i,prop in enumerate(propstodraw):
     nproduce @M(px,py-0.11*i-0.01,0.1) ,(20) _(0.06) @B(0.12) @M(px,py-0.11*i),(propcolors[i])  _(0.05) @B(0.1)  @M(px+0.1,py+0.04-0.11*i) ,(20) Label(prop,16)

module Apex(p) , I(p), Root(p), Medium(p), LApex(p) , LF(t)


Axiom: 
  nproduce _(2) 
  nproduce Medium (OrganParameter(auxin=initial_root_medium_auxin_level, auxin_decay_coef = root_auxin_decay_coef, first=True, medium=True)) 
  nproduce I(OrganParameter(auxin=initial_internode_auxin_level,
                            pin_down=pin_init,
                            ck=ck_init,
                            sl=sl_init))
  
  nproduce [ LApex(ApexParameter(auxin=initial_bud_auxin_level, 
                                 auxin_synth_coef = lateral_bud_auxin_synth_coef,
                                 auxin_target_concentration = initial_bud_auxin_level + 5,
                                 brc1=init_brc1, 
                                 brc1_synth_coef=brc1_synth_coef,
                                 brc1_base_synth_coef=brc1_base_synth_coef,
                                 brc1_decay_coef=brc1_decay_coef)) ]
  nproduce Medium(OrganParameter(auxin=initial_top_medium_auxin_level,auxin_synth_coef=apical_bud_auxin_synth_coef, pin_down=pin_init,medium=True))
  nproduce E



derivation length: 1000
ignore: +-
production:

Medium(pd) < I(p) > [  LApex(pl) ]  Medium(pu) :
  p = process_transport(p, pu, pd, [pl],verbose=False)
  produce I(p)

I(pd) < LApex(p) :
  # print p.auxin, pd.auxin, p.flux_down, p.pin_down
  print p.brc1, p.auxin
  p = process_transport(p,None, pd, None)
  if not p.active:
    if  activation_flux_th(p) and ACTIVATION:
      p.active = True
  produce LApex(p)


Medium(pd) < I(p) >  Medium(pu) :
  p = process_transport(p, pu, pd, None)
  produce I(p)


Medium(p) >  I(pu): # The root compartment
  p = process_transport(p,pu, None, None)
  produce Medium(p)

I(pd) < Medium(p) : # The top compartment
  p = process_transport(p,None, pd, None) #, verbose = 2)
  produce Medium(p)



interpretation:
maximum depth: 4


I(p) :
    draw_internode(p, max_pin_value, max_auxin_value, lwidth)

Root(p) :
   draw_internode(p, max_pin_value, max_auxin_value, lwidth)


Medium(p) :
   draw_internode(p, max_pin_value, max_auxin_value, lwidth)



I(pd) [  <   LApex(p) :
   nproduce | f(1.5) +(90) f(1.5)
   draw_internode(p, max_pin_value, max_auxin_value, lwidth,propstodraw=['sugar','auxin','ck','sl','slp','brc1'])
   #   nproduce f(0.02) _(p.g) @b(1)
   #   if p.g > g_threshold:
   #      nproduce _(0.01) ,(21) F(0.5) Flower(p)
   nproduce _(0.01) ,(21) F(0.5) Flower(p)
   
   mdfluxij = lambda f: dfluxij(f,p, pd)
   
   pfd = p.flux_down
   fluxvalues = arange(min(pfd,-1),max(pfd,5),0.1)
   dfvalues  = map(mdfluxij,fluxvalues)
   
   mdfluxij = lambda f: dfluxij(f,p, pd)
   plotCurve((fluxvalues,dfvalues),[(p.flux_down, mdfluxij(p.flux_down))],pos = (0.1,0)) #,yextend=(-5,10))


Flower(p):
   col = 0
   if not p.active: col = 9
   produce ,(col) f(0.1 if  not p.active else 0.6) @O(0.3 if not p.active else 0.6)

Apex(p) :
  draw_internode(p, max_pin_value, max_auxin_value, lwidth)
  produce Flower(p)


##############

T --> ,(0) f(0.3) @O(0.6)




E --> @2D @M(0.9,0.9 )Label( str(getIterationNb()) )

endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_0 = pgl.Material("Color_0" , ambient = (39,0,0) , diffuse = 4.61538 , )
	Color_0.name = "Color_0"
	context.turtle.setMaterial(0,Color_0)
	Color_1 = pgl.Material("Color_1" , ambient = (40,5,0) , diffuse = 4.518 , )
	Color_1.name = "Color_1"
	context.turtle.setMaterial(1,Color_1)
	Color_2 = pgl.Material("Color_2" , ambient = (41,10,0) , diffuse = 4.42061 , )
	Color_2.name = "Color_2"
	context.turtle.setMaterial(2,Color_2)
	Color_3 = pgl.Material("Color_3" , ambient = (43,15,0) , diffuse = 4.32322 , )
	Color_3.name = "Color_3"
	context.turtle.setMaterial(3,Color_3)
	Color_4 = pgl.Material("Color_4" , ambient = (44,21,0) , diffuse = 4.22583 , )
	Color_4.name = "Color_4"
	context.turtle.setMaterial(4,Color_4)
	Color_5 = pgl.Material("Color_5" , ambient = (46,26,0) , diffuse = 4.12845 , )
	Color_5.name = "Color_5"
	context.turtle.setMaterial(5,Color_5)
	Color_6 = pgl.Material("Color_6" , ambient = (47,31,0) , diffuse = 4.03106 , )
	Color_6.name = "Color_6"
	context.turtle.setMaterial(6,Color_6)
	Color_7 = pgl.Material("Color_7" , ambient = (48,37,0) , diffuse = 3.93367 , )
	Color_7.name = "Color_7"
	context.turtle.setMaterial(7,Color_7)
	Color_8 = pgl.Material("Color_8" , ambient = (50,42,0) , diffuse = 3.83628 , )
	Color_8.name = "Color_8"
	context.turtle.setMaterial(8,Color_8)
	Color_9 = pgl.Material("Color_9" , ambient = (51,47,0) , diffuse = 3.7389 , )
	Color_9.name = "Color_9"
	context.turtle.setMaterial(9,Color_9)
	Color_10 = pgl.Material("Color_10" , ambient = (53,53,0) , diffuse = 3.64151 , )
	Color_10.name = "Color_10"
	context.turtle.setMaterial(10,Color_10)
	Color_15 = pgl.Material("Color_15" , ambient = (0,0,255) , diffuse = 0.627451 , )
	Color_15.name = "Color_15"
	context.turtle.setMaterial(15,Color_15)
	Color_16 = pgl.Material("Color_16" , ambient = (157,158,205) , diffuse = 0 , specular = (0,0,0) , )
	Color_16.name = "Color_16"
	context.turtle.setMaterial(16,Color_16)
	Color_17 = pgl.Material("Color_17" , ambient = (97,0,83) , diffuse = 1.64948 , )
	Color_17.name = "Color_17"
	context.turtle.setMaterial(17,Color_17)
	Color_18 = pgl.Material("Color_18" , ambient = (0,143,126) , diffuse = 1.46154 , )
	Color_18.name = "Color_18"
	context.turtle.setMaterial(18,Color_18)
	Color_20 = pgl.Material("Color_20" , ambient = (0,0,0) , diffuse = 26.6667 , )
	Color_20.name = "Color_20"
	context.turtle.setMaterial(20,Color_20)
	Color_21 = pgl.Material("Color_21" , ambient = (0,95,0) , diffuse = 0 , )
	Color_21.name = "Color_21"
	context.turtle.setMaterial(21,Color_21)
	Color_22 = pgl.Material("Color_22" , ambient = (128,193,96) , diffuse = 0 , )
	Color_22.name = "Color_22"
	context.turtle.setMaterial(22,Color_22)
	Color_23 = pgl.Material("Color_23" , ambient = (217,104,0) , diffuse = 0 , )
	Color_23.name = "Color_23"
	context.turtle.setMaterial(23,Color_23)
	context.options.setSelection('Warning with sharp module',0)
	context.options.setSelection('Selection Always Required',1)
	scalars = [('DEGRADATION', 'Bool', True), ('DIFFUSION', 'Bool', True), ('ACTIVATION', 'Bool', True)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
__copyright__ = 'open-source GPL'
__institutes__ = 'INRIA - CIRAD Virtual Plants'
__authors__ = 'F. Boudon, C. Godin'
